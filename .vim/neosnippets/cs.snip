# Unity
snippet find
    GameObject.Find("${1}")${2}
snippet gc
    GetComponent<${1}>()
snippet ac
    AddComponent<${1}>()
snippet sar
    SetActiveRecursively(${1:true})
snippet rc
    [RequireComponent (typeof(${1:AudioSource}))]
snippet ee
    [ExecuteInEditMode]
snippet log
    Debug.Log("${1:msg}");
snippet warn
    Debug.LogWarning("${1:msg}");
snippet err
    Debug.LogError("${1:msg}");
snippet inst
    (${2:GameObject}) GameObject.Instantiate(${1:thing}, Vector3.zero, Quaternion.identity);
snippet go
    GameObject ${1:go} = new GameObject(${2:name});
snippet s2i
    Convert.ToInt32(${1:string})
snippet s2f
    float.Parse(${1:string}, CultureInfo.InvariantCulture.NumberFormat)
snippet load
    (${2:GameObject}) Resources.Load("${1:path}")
snippet wait
    yield return new WaitForSeconds(${1:time})
snippet sm
    SendMessage("${1:message}", ${2:null}, ${3:SendMessageOptions.DontRequireReceiver})
snippet forl
    foreach (${1:int} ${2:var} in ${3:list})
    {
    ${4}
    }
snippet ford
    foreach (KeyValuePair<${1:int}, ${2:int}> pair in ${3:dict})
    {
    ${4}
    }
snippet list
    List<${1:int}> ${2:var} = new List<$1>();
snippet dict
    Dictionary<${1:int}, ${2:int}> ${3:var} = new Dictionary<$1, $2>();
# if condition
snippet if
    if (${1})
    {
    ${0}
    }
snippet el
    else
    {
    ${0}
    }
snippet ifs
    if (${1})
    ${0}
# ternary conditional
snippet t
    ${1} ? ${2} : ${0}
snippet ?
    ${1} ? ${2} : ${0}
# do while loop
snippet do
    do
    {
    ${0}
    } while (${1});
# while loop
snippet wh
    while (${1})
    {
    ${0}
    }
# for loop
snippet for
    for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})
    {
    ${0}
    }
# foreach
snippet fore
    foreach (var ${1:entry} in ${2}) {
    ${0}
  }
snippet foreach
    foreach (var ${1:entry} in ${2}) {
    ${0}
  }
snippet each
    foreach (var ${1:entry} in ${2}) {
    ${0}
  }
# interfaces
snippet interface
    public interface ${1:`vim_snippets#Filename()`}
     {
    ${0}
    }
snippet if+
    public interface ${1:`vim_snippets#Filename()`}
    {
    ${0}
    }
# class bodies
snippet class
    public class ${1:`vim_snippets#Filename()`}
    {
    ${0}
    }
# constructor
snippet constructor
    public ${1:`vim_snippets#Filename()`}()
    {
    ${0}
    }
# properties - auto properties by default.
# default type is int with layout get / set.
snippet p+
    public ${1:int} ${2:} { get; set; }
snippet p+&
    public ${1:int} ${2:} { get; internal set; }
snippet p+|
    public ${1:int} ${2:} { get; protected set; }
snippet p+-
    public ${1:int} ${2:} { get; private set; }
# members - void
snippet m
    ${1:public} ${2:void} ${3:}(${4:})
    {
    ${5:}
    }
snippet m+
    public ${1:void} ${2:}(${3:})
    {
    ${4:}
    }
snippet m&
    internal ${1:void} ${2:}(${3:})
    {
    ${4:}
    }
snippet m|
    protected ${1:void} ${2:}(${3:})
    {
    ${4:}
    }
snippet m-
    private ${1:void} ${2:}(${3:})
    {
    ${4:}
    }
# members - int
snippet mi
    ${1:public} int ${2:}(${3:})
    {
    ${4:return 0;}
    }
snippet mi+
    public int ${1:}(${2:})
    {
    ${3:return 0;}
    }
snippet mi&
    internal int ${1:}(${2:})
    {
    ${3:return 0;}
    }
snippet mi|
    protected int ${1:}(${2:})
    {
    ${3:return 0;}
    }
snippet mi-
    private int ${1:}(${2:})
    {
    ${3:return 0;}
    }
# members - bool
snippet mb
    ${1:public} bool ${2:}(${3:})
    {
    ${4:return false;}
    }
snippet mb+
    public bool ${1:}(${2:})
    {
    ${3:return false;}
    }
snippet mb&
    internal bool ${1:}(${2:})
    {
    ${3:return false;}
    }
snippet mb|
    protected bool ${1:}(${2:})
    {
    ${3:return false;}
    }
snippet mb-
    private bool ${1:}(${2:})
    {
    ${3:return false;}
    }
# members - string
snippet ms
    ${1:public} string ${2:}(${3:})
    {
    ${4:return "";}
    }
snippet ms+
    public string ${1:}(${2:})
    {
    ${3:return "";}
    }
snippet ms&
    internal string ${1:}(${2:})
    {
    ${3:return "";}
    }
snippet ms|
    protected string ${1:}(${2:})
    {
    ${3:return "";}
    }
snippet ms-
    private string ${1:}(${2:})
    {
    ${3:return "";}
    }
# structure
snippet struct
    public struct ${1:`vim_snippets#Filename()`}
    {
    ${0}
    }

# using
snippet using 
    using (${1:})
    {
    }

# enumeration
snippet enum
    public enum ${1}
    {
    ${0}
    }
# preprocessor directives
snippet #if
    #if
    ${0}
    #endif
# inline xml documentation
snippet //
    /// <summary>${0}</summary>
snippet ///
    /// <summary>
    /// ${0}
    /// </summary>
snippet <p
    <param name="${1}">${2}</param>
snippet <ex
    <exception cref="${0:System.Exception}">${1}</exception>
snippet <r
    <returns>${0}</returns>
snippet <s
    <see cref="${0}"/>
snippet <rem
    <remarks>${0}</remarks>
snippet <c
    <code>${0}</code>
